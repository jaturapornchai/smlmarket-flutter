import 'lib/services/database_service.dart';

Future<void> main() async {
  print('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Complete Database Scanning...\n');

  final dbService = DatabaseService();

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: ‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å)
    print('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (scanDatabase)...');
    final allTables = await dbService.scanDatabase();

    if (allTables.isNotEmpty) {
      print('‚úÖ ‡∏û‡∏ö ${allTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');

      // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° database type
      final clickHouseTables = allTables
          .where((table) => table['database_type'] == 'ClickHouse')
          .toList();
      final postgreSQLTables = allTables
          .where((table) => table['database_type'] == 'PostgreSQL')
          .toList();

      print('   üìä ClickHouse: ${clickHouseTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      print('   üêò PostgreSQL: ${postgreSQLTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Top 5 ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
      allTables.sort((a, b) {
        final aSize = a['size_mb'] ?? 0;
        final bSize = b['size_mb'] ?? 0;
        if (aSize is String) return -1;
        if (bSize is String) return 1;
        return bSize.compareTo(aSize);
      });

      print('\n   üèÜ Top 5 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:');
      for (var i = 0; i < allTables.length && i < 5; i++) {
        final table = allTables[i];
        final dbType = table['database_type'] ?? 'Unknown';
        final name = table['table_name'] ?? table['name'] ?? 'Unknown';
        final rows = table['total_rows'] ?? 0;
        final size = table['size_mb'] ?? 0;
        final icon = dbType == 'ClickHouse' ? 'üìä' : 'üêò';
        print('     ${i + 1}. $icon $name ($dbType): $rows ‡πÅ‡∏ñ‡∏ß, ${size} MB');
      }
    } else {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏î‡πÜ');
    }

    print('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print('2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    final comprehensiveInfo = await dbService.getComprehensiveDatabaseInfo();

    if (comprehensiveInfo['success'] == true) {
      final summary = comprehensiveInfo['summary'] as Map<String, dynamic>;
      final clickhouse =
          comprehensiveInfo['clickhouse'] as Map<String, dynamic>;
      final postgresql =
          comprehensiveInfo['postgresql'] as Map<String, dynamic>;

      print('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:');
      print('   üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°:');
      print('     - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${summary['total_databases']} ‡∏ê‡∏≤‡∏ô');
      print('     - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${summary['total_tables']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      print('     - ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${summary['total_rows']} ‡πÅ‡∏ñ‡∏ß');
      print('     - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: ${summary['total_size_mb']} MB');

      print('   üìä ClickHouse:');
      print('     - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${clickhouse['status']}');
      print('     - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${clickhouse['table_count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      print('     - ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${clickhouse['total_rows']} ‡πÅ‡∏ñ‡∏ß');
      print('     - ‡∏Ç‡∏ô‡∏≤‡∏î: ${clickhouse['total_size_mb']} MB');

      print('   üêò PostgreSQL:');
      print('     - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${postgresql['status']}');
      print('     - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${postgresql['table_count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      print('     - ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${postgresql['total_rows']} ‡πÅ‡∏ñ‡∏ß');
      print('     - ‡∏Ç‡∏ô‡∏≤‡∏î: ${postgresql['total_size_mb']} MB');
    } else {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${comprehensiveInfo['error']}');
    }

    print('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î field ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    if (allTables.isNotEmpty) {
      print('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...');

      // ‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      allTables.sort((a, b) {
        final aRows = a['total_rows'] ?? 0;
        final bRows = b['total_rows'] ?? 0;
        return bRows.compareTo(aRows);
      });

      final topTable = allTables.first;
      final tableName = topTable['table_name'] ?? topTable['name'] ?? '';
      final dbType = topTable['database_type'] ?? 'Unknown';

      if (tableName.isNotEmpty) {
        try {
          Map<String, dynamic> fields;
          if (dbType == 'ClickHouse') {
            fields = await dbService.getClickHouseTableFields(tableName);
          } else {
            fields = await dbService.getPostgreSQLTableFields(tableName);
          }

          final fieldList = fields['fields'] as List<Map<String, dynamic>>;
          print('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $tableName ($dbType) ‡∏°‡∏µ ${fieldList.length} fields:');

          for (var i = 0; i < fieldList.length && i < 10; i++) {
            final field = fieldList[i];
            if (dbType == 'ClickHouse') {
              print('     üìã ${field['name']}: ${field['type']}');
            } else {
              final nullable = field['is_nullable'] == 'YES'
                  ? ' (NULL)'
                  : ' (NOT NULL)';
              print(
                '     üìã ${field['column_name']}: ${field['data_type']}$nullable',
              );
            }
          }

          if (fieldList.length > 10) {
            print('     ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${fieldList.length - 10} fields');
          }
        } catch (e) {
          print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π fields: $e');
        }
      }
    }
  } catch (e) {
    print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å: $e');
  }

  print('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Complete Database Scanning ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}
