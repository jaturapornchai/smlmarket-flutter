// ‡∏´‡πâ‡∏≤‡∏° AI ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ

import 'dart:convert';
import 'dart:developer' as developer;
import 'package:http/http.dart' as http;

class DeepSeekService {
  static const String apiKey = 'sk-f57e7b56ab3f4f1a8030b7ae57500b85';
  static const String apiUrl = 'https://api.deepseek.com/v1/chat/completions';
  Future<String> enhanceSearchQuery(String originalQuery) async {
    final stopwatch = Stopwatch()..start();
    developer.log(
      'ü§ñ Starting DeepSeek query enhancement for: "$originalQuery"',
      name: 'DeepSeekService',
    );

    try {
      developer.log(
        'üì§ Sending request to DeepSeek API',
        name: 'DeepSeekService',
      );

      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          'Authorization': 'Bearer $apiKey',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'model': 'deepseek-chat',
          'messages': [
            {
              'role': 'system',
              'content': '''
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô barcode ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏´‡∏±‡∏™ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
Example:
Input: "toyota"
Output: toyota ‡πÇ‡∏ï‡πÇ‡∏¢‡∏ï‡πâ‡∏≤
Input: "brake pad"
Output: ‡∏ú‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏Ñ''',
            },
            {'role': 'user', 'content': originalQuery},
          ],
          'max_tokens': 100,
          'temperature': 0.3,
        }),
      );

      stopwatch.stop();
      developer.log(
        '‚è±Ô∏è DeepSeek API response time: ${stopwatch.elapsedMilliseconds}ms',
        name: 'DeepSeekService',
      );

      if (response.statusCode == 200) {
        developer.log(
          '‚úÖ DeepSeek API success (${response.statusCode})',
          name: 'DeepSeekService',
        );

        final jsonData = jsonDecode(response.body);
        final enhancedQuery =
            jsonData['choices'][0]['message']['content']?.trim() ??
            originalQuery;

        if (originalQuery == enhancedQuery) {
          developer.log(
            'üîÑ No enhancement needed, returning original query',
            name: 'DeepSeekService',
          );
          return originalQuery;
        } else {
          final finalQuery = "$originalQuery $enhancedQuery";
          developer.log(
            '‚ú® Query enhanced: "$originalQuery" ‚Üí "$finalQuery"',
            name: 'DeepSeekService',
          );
          return finalQuery;
        }
      } else {
        developer.log(
          '‚ùå DeepSeek API error: ${response.statusCode}',
          name: 'DeepSeekService',
          error: response.body,
        );
        return originalQuery; // Return original query if API fails
      }
    } catch (e) {
      stopwatch.stop();
      developer.log(
        'üí• DeepSeek service error after ${stopwatch.elapsedMilliseconds}ms',
        name: 'DeepSeekService',
        error: e,
        stackTrace: StackTrace.current,
      );
      return originalQuery; // Return original query if service fails
    }
  }
}
