import 'lib/services/database_service.dart';

void main() async {
  print('ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ PostgreSQL р╕Др╕гр╕Ър╕Др╕гр╕▒р╕Щ');

  final DatabaseService databaseService = DatabaseService();

  try {
    // 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    print('\nЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е...');
    final healthResult = await databaseService.checkHealth();
    print('р╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е: ${healthResult['status']}');

    // 2. р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щ PostgreSQL
    print('\nЁЯПЧя╕П р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щ PostgreSQL...');
    final createResult = await databaseService.createAllPostgreSQLTables();

    if (createResult['success'] == true) {
      print('тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И!');
      print('р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б: ${createResult['message']}');
    } else {
      print('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З');
      print('р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: ${createResult['error']}');
    }

    // 3. р╕кр╣Бр╕Бр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е PostgreSQL
    print('\nЁЯФН р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Бр╕Бр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е PostgreSQL...');
    final tables = await databaseService.scanDatabase();
    print('р╕Юр╕Ър╕Хр╕▓р╕гр╕▓р╕З ${tables.length} р╕Хр╕▓р╕гр╕▓р╕Зр╣Гр╕Щ PostgreSQL:');

    for (var table in tables) {
      print(
        '  ЁЯУЛ ${table['table_name']} (${table['total_rows']} р╣Бр╕Цр╕з, ${table['size_mb']} MB)',
      );
    }

    // 4. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н
    print('\nЁЯФО р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н...');
    final importantTables = [
      'customers',
      'carts',
      'cart_items',
      'coupons',
      'coupon_usages',
      'orders',
      'order_items',
      'order_status_history',
    ];

    for (String tableName in importantTables) {
      try {
        final fields = await databaseService.getTableFields(tableName);
        print('  тЬЕ $tableName: ${fields['field_count']} fields');
      } catch (e) {
        print('  тЭМ $tableName: р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕кр╕гр╣Йр╕▓р╕З р╕лр╕гр╕╖р╕н р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓');
      }
    }

    // 5. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З
    print('\nЁЯУЭ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З...');

    // р╕Чр╕Фр╕кр╕нр╕Ър╣Гр╕кр╣Ир╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З
    try {
      await databaseService.executeCommand('''
        INSERT INTO customers (first_name, last_name, email, phone) 
        VALUES ('р╕Чр╕Фр╕кр╕нр╕Ъ', 'р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й', 'test@example.com', '0812345678')
        ON CONFLICT (email) DO NOTHING
      ''');
      print('  тЬЕ р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И');
    } catch (e) {
      print('  тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓: $e');
    }

    // 6. р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Щр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е
    print('\nЁЯУК р╕кр╕Цр╕┤р╕Хр╕┤р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З:');
    for (String tableName in importantTables) {
      try {
        final countResult = await databaseService.executeSelectQuery('''
          SELECT COUNT(*) as total FROM $tableName
        ''');
        final count = countResult['data'][0]['total'];
        print('  ЁЯУИ $tableName: $count р╣Бр╕Цр╕з');
      } catch (e) {
        print('  тЭМ $tableName: р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Щр╕▒р╕Ър╣Др╕Фр╣Й');
      }
    }

    print('\nЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╕гр╕░р╕Ър╕Ъ PostgreSQL р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ');
  } catch (e) {
    print('\nЁЯТе р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ: $e');
  }
}
