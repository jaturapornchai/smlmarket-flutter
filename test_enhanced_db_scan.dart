import 'lib/services/database_service.dart';

Future<void> main() async {
  print('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Enhanced PostgreSQL Database Scanning...\n');

  final dbService = DatabaseService();

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: ‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    print('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...');
    final tables = await dbService.scanDatabase();

    if (tables.isNotEmpty) {
      print('‚úÖ ‡∏û‡∏ö ${tables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
      for (final table in tables) {
        final tableName = table['table_name'] ?? table['name'] ?? 'Unknown';
        final rows = table['total_rows'] ?? 0;
        final sizeMb = table['size_mb'] ?? 0.0;

        print('   üìä $tableName: $rows ‡πÅ‡∏ñ‡∏ß, ${sizeMb}MB');
      }
    } else {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }

    print('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏£‡∏Å
    if (tables.isNotEmpty) {
      final firstTable = tables.first;
      final tableName = firstTable['table_name'] ?? firstTable['name'] ?? '';

      if (tableName.isNotEmpty) {
        print('2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: $tableName');

        try {
          final tableFields = await dbService.getTableFields(tableName);
          final fields =
              tableFields['fields'] as List<Map<String, dynamic>>? ?? [];
          final primaryKeys =
              tableFields['primary_keys'] as List<String>? ?? [];

          print('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $tableName ‡∏°‡∏µ ${fields.length} fields:');

          for (final field in fields) {
            final name = field['column_name'];
            final type = field['data_type'];
            final nullable = field['is_nullable'] == 'YES'
                ? 'NULL'
                : 'NOT NULL';
            final isPrimary = primaryKeys.contains(name) ? ' üîë' : '';

            print('   üìã $name: $type $nullable$isPrimary');
          }

          if (primaryKeys.isNotEmpty) {
            print('   üîë Primary Keys: ${primaryKeys.join(', ')}');
          }
        } catch (e) {
          print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π fields: $e');
        }

        print('');

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        print('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: $tableName');

        try {
          final stats = await dbService.getTableStatistics(tableName);

          print('‚úÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏£‡∏≤‡∏á $tableName:');
          print('   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${stats['total_rows']}');
          print('   üíæ ‡∏Ç‡∏ô‡∏≤‡∏î: ${stats['size_pretty']} (${stats['size_mb']} MB)');
          print('   üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß: ${stats['average_row_size']} bytes');
        } catch (e) {
          print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: $e');
        }
      }
    }
  } catch (e) {
    print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
  }

  print('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Enhanced Database Scanning ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}
