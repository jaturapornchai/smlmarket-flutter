import 'lib/services/database_service.dart';

Future<void> main() async {
  print('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Dual Database Scanning (ClickHouse + PostgreSQL)...\n');

  final dbService = DatabaseService();

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check
    print('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check...');
    final health = await dbService.checkHealth();
    print('‚úÖ Health Status: ${health['status']}');
    print('   üìÑ Version: ${health['version']}');
    print('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö
    print('2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á ClickHouse ‡πÅ‡∏•‡∏∞ PostgreSQL...');
    final scanResult = await dbService.scanBothDatabases();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ClickHouse
    final clickHouseData = scanResult['clickhouse'] as Map<String, dynamic>;
    final clickHouseTables =
        clickHouseData['tables'] as List<Map<String, dynamic>>;
    print('üìä ClickHouse Database:');
    print('   ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${clickHouseData['count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
    print('   ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: ${clickHouseData['total_size_mb']} MB');

    if (clickHouseTables.isNotEmpty) {
      print('   ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
      for (final table in clickHouseTables.take(5)) {
        print(
          '     üóÉÔ∏è  ${table['table_name']}: ${table['total_rows']} ‡πÅ‡∏ñ‡∏ß, ${table['size_mb']} MB',
        );
      }
      if (clickHouseTables.length > 5) {
        print('     ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${clickHouseTables.length - 5} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      }
    }
    print('');

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• PostgreSQL
    final postgreSQLData = scanResult['postgresql'] as Map<String, dynamic>;
    final postgreSQLTables =
        postgreSQLData['tables'] as List<Map<String, dynamic>>;
    print('üêò PostgreSQL Database:');
    print('   ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${postgreSQLData['count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
    print('   ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: ${postgreSQLData['total_size_mb']} MB');

    if (postgreSQLTables.isNotEmpty) {
      print('   ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á:');
      for (final table in postgreSQLTables.take(5)) {
        print(
          '     üóÉÔ∏è  ${table['table_name']}: ${table['total_rows']} ‡πÅ‡∏ñ‡∏ß, ${table['size_mb']} MB',
        );
      }
      if (postgreSQLTables.length > 5) {
        print('     ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${postgreSQLTables.length - 5} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
      }
    }
    print('');

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
    final combinedData = scanResult['combined'] as Map<String, dynamic>;
    print('üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°:');
    print('   ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${combinedData['total_tables']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
    print('   - ClickHouse: ${clickHouseData['count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
    print('   - PostgreSQL: ${postgreSQLData['count']} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
    print('');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (clickHouseTables.isNotEmpty) {
      print('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ClickHouse...');
      final firstClickHouseTable = clickHouseTables.first['table_name'];
      try {
        final fields = await dbService.getClickHouseTableFields(
          firstClickHouseTable,
        );
        final fieldList = fields['fields'] as List<Map<String, dynamic>>;
        print(
          '‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $firstClickHouseTable (ClickHouse) ‡∏°‡∏µ ${fieldList.length} fields:',
        );
        for (final field in fieldList.take(5)) {
          print('   üìã ${field['name']}: ${field['type']}');
        }
        if (fieldList.length > 5) {
          print('   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${fieldList.length - 5} fields');
        }
      } catch (e) {
        print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π ClickHouse fields: $e');
      }
      print('');
    }

    if (postgreSQLTables.isNotEmpty) {
      print('4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π fields ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á PostgreSQL...');
      final firstPostgreSQLTable = postgreSQLTables.first['table_name'];
      try {
        final fields = await dbService.getPostgreSQLTableFields(
          firstPostgreSQLTable,
        );
        final fieldList = fields['fields'] as List<Map<String, dynamic>>;
        print(
          '‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $firstPostgreSQLTable (PostgreSQL) ‡∏°‡∏µ ${fieldList.length} fields:',
        );
        for (final field in fieldList.take(5)) {
          final nullable = field['is_nullable'] == 'YES'
              ? ' (NULL)'
              : ' (NOT NULL)';
          print(
            '   üìã ${field['column_name']}: ${field['data_type']}$nullable',
          );
        }
        if (fieldList.length > 5) {
          print('   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${fieldList.length - 5} fields');
        }
      } catch (e) {
        print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π PostgreSQL fields: $e');
      }
      print('');
    }
  } catch (e) {
    print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
  }

  print('üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Dual Database Scanning ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}
