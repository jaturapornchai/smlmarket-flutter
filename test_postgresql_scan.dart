import 'dart:convert';
import 'package:http/http.dart' as http;

Future<void> main() async {
  print('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö PostgreSQL Database Scanning...\n');

  const String baseUrl = 'http://192.168.2.36:8008';

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: PostgreSQL Information Schema Query
  print('‡∏ó‡∏î‡∏™‡∏≠‡∏ö PostgreSQL Information Schema...');
  try {
    final response = await http.post(
      Uri.parse('$baseUrl/v1/pgselect'),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: jsonEncode({
        'query': '''
          SELECT 
            table_name,
            'PostgreSQL' as engine,
            0 as total_rows,
            0 as total_bytes
          FROM information_schema.tables 
          WHERE table_schema = 'public'
          ORDER BY table_name
        ''',
      }),
    );

    if (response.statusCode == 200) {
      print('‚úÖ PostgreSQL Information Schema: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      final data = jsonDecode(response.body);
      print('   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${data['data']?.length ?? 0}');
      if (data['data'] != null && data['data'].isNotEmpty) {
        print('   üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö:');
        for (var table in data['data']) {
          print('     - ${table['table_name']}');
        }
      }
    } else {
      print('‚ùå PostgreSQL Query: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${response.statusCode})');
      print('   üìÑ Response: ${response.body}');
    }
  } catch (e) {
    print('‚ùå PostgreSQL Query: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - $e');
  }

  print('\n');

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  print('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers...');
  try {
    final response = await http.post(
      Uri.parse('$baseUrl/v1/pgselect'),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: jsonEncode({
        'query': '''
          SELECT 
            column_name,
            data_type,
            is_nullable,
            column_default
          FROM information_schema.columns 
          WHERE table_name = 'customers' AND table_schema = 'public'
          ORDER BY ordinal_position
        ''',
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['data'] != null && data['data'].isNotEmpty) {
        print('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers: ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
        print('   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô columns: ${data['data']?.length ?? 0}');
        print('   üìÑ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:');
        for (var column in data['data']) {
          print(
            '     - ${column['column_name']}: ${column['data_type']} (${column['is_nullable'] == 'YES' ? 'nullable' : 'not null'})',
          );
        }
      } else {
        print('‚ÑπÔ∏è  ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á');
      }
    } else {
      print('‚ùå Table Structure Query: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${response.statusCode})');
      print('   üìÑ Response: ${response.body}');
    }
  } catch (e) {
    print('‚ùå Table Structure Query: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - $e');
  }

  print('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö PostgreSQL Database Scanning ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}
